package gui;

import gui.model.PlayerType;
import io.deeplay.communication.converter.Converter;
import io.deeplay.communication.dto.StartGameDTO;
import lombok.extern.slf4j.Slf4j;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

@Slf4j
public class MainPage {
    public static final int APP_WIDTH = 800;
    public static final int APP_HEIGHT = 400;
    private JPanel mainPanel;
    private JButton startGameButton;
    private JComboBox<?> gameTypesBox;
    private JComboBox<?> botLevel1;
    private JComboBox<?> playerColor;
    private JComboBox<?> botLevel2;
    private List<String> gameSettings;

    /**
     * Конструктор класса. Задает слушателей для кнопки начала игры и JComboBox с типом игры.
     * При нажатии на кнопку "начать игру" обрабатывает выбранные пользователем данные и конвертирует их в StartGameDTO.
     * Затем создает объекты ChessGUI и\или создает новый поток BotStarter в зависимости от выбранного типа игры.
     */
    public MainPage() {
        gameTypesBox.addActionListener(e -> {
            String selectedGameType = (String) gameTypesBox.getSelectedItem();
            assert selectedGameType != null;
            botLevel1.setEnabled(selectedGameType.equals("Бот vs. Бот") || selectedGameType.equals("Человек vs. Бот"));
            botLevel2.setEnabled(selectedGameType.equals("Бот vs. Бот"));
        });

        startGameButton.addActionListener(e -> {
            gameSettings = new ArrayList<>();
            try {
                Frame[] frames = JFrame.getFrames();
                frames[0].dispose();
                gameSettings.add(String.valueOf(gameTypesBox.getSelectedItem()));
                gameSettings.add(String.valueOf(String.valueOf(playerColor.getSelectedItem())));
                gameSettings.add(String.valueOf(String.valueOf(botLevel1.getSelectedItem())));
                StartGameDTO startGameDTO = Converter.getStartGameSettings(gameSettings);

                System.out.println("creating new client ----- " + gameSettings);

                if (gameSettings.get(0).equals("Человек vs. Человек")) {
                    new ChessGUI(startGameDTO, PlayerType.HUMAN);
                } else if (gameSettings.get(0).equals("Человек vs. Бот")) {
                    new ChessGUI(startGameDTO, PlayerType.HUMAN);
                    startGameDTO.setCurrentColor(startGameDTO.getCurrentColor().opposite());
                    new Thread(() -> new BotStarter(startGameDTO).initialize()).start();
                }
                else {
                    new ChessGUI(startGameDTO, PlayerType.BOT);
                    gameSettings = new ArrayList<>();
                    gameSettings.add(String.valueOf(gameTypesBox.getSelectedItem()));
                    gameSettings.add(String.valueOf(String.valueOf(playerColor.getSelectedItem())));
                    gameSettings.add(String.valueOf(String.valueOf(botLevel2.getSelectedItem())));
                    StartGameDTO startGameDTO2 = Converter.getStartGameSettings(gameSettings);

                    startGameDTO2.setCurrentColor(startGameDTO.getCurrentColor().opposite());
                    new Thread(() -> new BotStarter(startGameDTO2).initialize()).start();
                }
            } catch (NullPointerException exception) {
                log.error("Can't find any frame!" + exception);
            }
        });
    }

    /**
     * Метод запускает окно с главной страницей.
     */
    public void startApplication() {
        JFrame frame = new JFrame("MainPage");
        frame.setContentPane(new MainPage().mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        int windowHeight = (int) ((Toolkit.getDefaultToolkit().getScreenSize().getHeight() - APP_HEIGHT) / 2);
        int windowWidth = (int) ((Toolkit.getDefaultToolkit().getScreenSize().getWidth() - APP_WIDTH) / 2);
        frame.setLocation(windowWidth, windowHeight);

        frame.pack();
        frame.setVisible(true);
    }

    /**
     * Метод задает начальные значения для ComboBox в интерфейсе.
     */
    private void createUIComponents() {
        String[] gameTypes = {"Человек vs. Человек", "Бот vs. Бот", "Человек vs. Бот"};
        gameTypesBox = new JComboBox<>(gameTypes);

        String[] playerTypes = {"Я", "Противник"};
        playerColor = new JComboBox<>(playerTypes);

        String[] botLevelsArray = {"Random", "MinimaxIgor", "MinimaxMarina", "NegamaxIgor", "NegamaxMarina",
                "ExpectimaxIgor", "ExpectimaxMarina"};
        botLevel1 = new JComboBox<>(botLevelsArray);
        botLevel2 = new JComboBox<>(botLevelsArray);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setBackground(new Color(-1));
        mainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel1.setBackground(new Color(-1));
        mainPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(25, 25, 25, 25), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setBackground(new Color(-1));
        panel1.add(panel2);
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel3.setBackground(new Color(-1));
        panel2.add(panel3, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel3.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label1 = new JLabel();
        label1.setForeground(new Color(-16777216));
        label1.setHorizontalAlignment(2);
        label1.setText("Выберите тип игры:");
        panel3.add(label1);
        gameTypesBox.setBackground(new Color(-1));
        gameTypesBox.setForeground(new Color(-16777216));
        panel3.add(gameTypesBox);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel4.setBackground(new Color(-1));
        panel4.setEnabled(true);
        panel2.add(panel4, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel4.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label2 = new JLabel();
        label2.setForeground(new Color(-16777216));
        label2.setText("Выберите сложность бота №1:");
        panel4.add(label2);
        botLevel1.setBackground(new Color(-1));
        botLevel1.setEnabled(false);
        botLevel1.setForeground(new Color(-16777216));
        panel4.add(botLevel1);
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new FlowLayout(FlowLayout.LEFT, 6, 6));
        panel7.setBackground(new Color(-1));
        panel7.setEnabled(true);
        panel2.add(panel7, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel7.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label4 = new JLabel();
        label4.setForeground(new Color(-16777216));
        label4.setText("Выберите сложность бота №2:");
        panel7.add(label4);
        botLevel2.setBackground(new Color(-1));
        botLevel2.setEnabled(false);
        botLevel2.setForeground(new Color(-16777216));
        panel7.add(botLevel2);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel5.setBackground(new Color(-1));
        panel5.setEnabled(false);
        panel2.add(panel5, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel5.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JLabel label3 = new JLabel();
        label3.setForeground(new Color(-16777216));
        label3.setText("Выберите игрока с белым цветом");
        panel5.add(label3);
        playerColor.setBackground(new Color(-1));
        playerColor.setForeground(new Color(-16777216));
        panel5.add(playerColor);
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel6.setBackground(new Color(-1));
        mainPanel.add(panel6, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel6.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(25, 25, 25, 25), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        startGameButton = new JButton();
        startGameButton.setBackground(new Color(-16777216));
        startGameButton.setForeground(new Color(-1));
        startGameButton.setText("Начать игру");
        panel6.add(startGameButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
